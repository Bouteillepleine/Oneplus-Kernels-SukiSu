name: Build

inputs:
  model:
    required: true
    type: string
  soc:
    required: true
    type: string
  branch:
    required: true
    type: string
  manifest:
    required: true
    type: string
  android_version:
    required: true
    type: string
  kernel_version:
    required: true
    type: string
  ksun_branch:
    required: true
    type: string
    default: stable
  susfs_branch:
    description: SUSFS branch for kernel build
    required: false
    type: string
    default: ''
  KSU_META:
    description: SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡/)
    required: false
    type: string
    default: susfs-main/⚡Ultra⚡/
  HOOK:
    description: Hook type
    required: false
    type: choice
    default: manual
    options:
      - kprobe
      - manual
      - tracepoint
  LSM:
    description: Enable kernel-level Baseband Guard (LSM)?
    required: false
    type: boolean
    default: false
  optimize_level:
    required: false
    type: string
    default: O2

outputs:
  kernel_version:
    value: ${{ steps.save_metadata.outputs.kernel_version }}
  ksu_version:
    value: ${{ steps.save_metadata.outputs.ksu_version }}
  susfs_version:
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    value: ${{ steps.collect_stats.outputs.image_sha256 }}
  warnings:
    value: ${{ steps.collect_stats.outputs.warnings }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Validate inputs"
        model='${{ inputs.model }}'
        soc='${{ inputs.soc }}'
        branch='${{ inputs.branch }}'
        manifest='${{ inputs.manifest }}'
        optimize='${{ inputs.optimize_level }}'
        android_version='${{ inputs.android_version }}'
        kernel_version='${{ inputs.kernel_version }}'
        [[ -n "$model" ]] || { echo "Input 'model' cannot be empty"; exit 1; }
        [[ -n "$soc" ]] || { echo "Input 'soc' cannot be empty"; exit 1; }
        [[ -n "$branch" ]] || { echo "Input 'branch' cannot be empty"; exit 1; }
        [[ -n "$manifest" ]] || { echo "Input 'manifest' cannot be empty"; exit 1; }
        [[ -n "$android_version" ]] || { echo "Input 'android_version' cannot be empty"; exit 1; }
        [[ -n "$kernel_version" ]] || { echo "Input 'kernel_version' cannot be empty"; exit 1; }
        if ! [[ "$soc" =~ ^[A-Za-z0-9_-]+$ ]]; then
          echo "Input 'soc' contains invalid characters. Allowed: letters, digits, underscore, dash"
          exit 1
        fi
        if ! [[ "$branch" =~ ^[A-Za-z0-9._/-]+$ ]]; then
          echo "Input 'branch' contains invalid characters. Allowed: letters, digits, ., _, -, /"
          exit 1
        fi
        if [[ "$manifest" == http*://* ]]; then
          if ! [[ "$manifest" =~ ^https:// ]]; then
            echo "Manifest URL must be HTTPS"
            exit 1
          fi
          if ! [[ "$manifest" =~ .xml($|?) ]]; then
            echo "Manifest URL should point to an XML file (.xml)"
            exit 1
          fi
        else
          if ! [[ "$manifest" =~ .xml$ ]]; then
            echo "Manifest filename must end with .xml"
            exit 1
          fi
          if [[ "$manifest" =~ [[:space:]] ]]; then
            echo "Manifest filename cannot contain spaces"
            exit 1
          fi
        fi
        case "$optimize" in
          O2|O3) ;;
          *) echo "optimize_level must be O2 or O3; got '$optimize'"; exit 1 ;;
        esac
        echo "Input validation OK."
        echo "::endgroup::"
    - name: Init Derived Env
      shell: bash
      run: |
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"
    - name: Install Minimal Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Install deps"
        sudo apt-get -o Acquire::Retries=3 update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git curl ca-certificates build-essential clang lld flex bison \
          libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
          libxml2-utils rsync unzip dwarves file python3 jq
        sudo apt-get clean
        echo "::endgroup::"
    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "Bouteille"
        git config --global user.email "Bouteille@qq.com"
    - name: Setup Base Environment
      shell: bash
      run: |
        set -euo pipefail
        CONFIG="${{ inputs.model }}"
        echo "CONFIG=$CONFIG" >> "$GITHUB_ENV"
        REPO="/usr/local/bin/repo"
        if [ ! -x "$REPO" ]; then
          curl -s https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
          chmod +x "$REPO"
        fi
        echo "REPO=$REPO" >> "$GITHUB_ENV"
    - name: Clone AnyKernel3
      shell: bash
      run: |
        set -euo pipefail
        echo "Cloning AnyKernel3..."
        git clone https://github.com/Bouteillepleine/AnyKernel3.git -b gki-2.0
    - name: Prepare Manifest Fallback (compat)
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$GITHUB_WORKSPACE/.repo/manifests_fallback"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          FILE_BASENAME="custom_${{ inputs.model }}"
          curl -Ls "${{ inputs.manifest }}" -o "$GITHUB_WORKSPACE/.repo/manifests_fallback/${FILE_BASENAME}.xml"
          echo "FILE=${FILE_BASENAME}" >> "$GITHUB_ENV"
        else
          FILE_BASENAME="${{ inputs.manifest }}"
          if [[ "$FILE_BASENAME" == *.xml ]]; then
            echo "FILE=${FILE_BASENAME%.xml}" >> "$GITHUB_ENV"
          else
            echo "FILE=${FILE_BASENAME}" >> "$GITHUB_ENV"
          fi
        fi
    - name: Initialize and Sync Kernel Source
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "${CONFIG}"
        cd "${CONFIG}"
        echo "Initializing kernel repo..."
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls "${{ inputs.manifest }}" -o .repo/manifests/temp_manifest.xml
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b oneplus/${{ inputs.soc }} -m temp_manifest.xml \
            --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b ${{ inputs.branch }} -m ${{ inputs.manifest }} \
            --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        "$REPO" --version
        "$REPO" --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j"$(nproc --all)" --fail-fast
    - name: Mirror manifest into fallback (post-sync)
      if: ${{ inputs.manifest != '' && !startsWith(inputs.manifest, 'https://') }}
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$GITHUB_WORKSPACE/.repo/manifests_fallback"
        SRC="$GITHUB_WORKSPACE/${CONFIG}/.repo/manifests/${{ inputs.manifest }}"
        if [ -f "$SRC" ]; then
          cp -f "$SRC" "$GITHUB_WORKSPACE/.repo/manifests_fallback/${{ inputs.manifest }}"
        fi
    - name: Clean Up ABI Protected Exports
      shell: bash
      run: |
        set -euo pipefail
        cd "${CONFIG}/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
        rm -f msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
        df -h
    - name: Derive Kernel / Manifest Metadata
      shell: bash
      run: |
        set -euo pipefail
        cd "${CONFIG}/kernel_platform/common"
        if [[ "${{ inputs.manifest }}" == https://* ]]; then
          MANIFEST_BASENAME="temp_manifest.xml"
        else
          MANIFEST_BASENAME="${{ inputs.manifest }}"
        fi
        MANIFEST_PATH="$GITHUB_WORKSPACE/${CONFIG}/.repo/manifests/${MANIFEST_BASENAME}"
        echo "MANIFEST_PATH=$MANIFEST_PATH" >> "$GITHUB_ENV"
        V=$(grep -m1 '^VERSION *=' Makefile | awk '{print $3}')
        P=$(grep -m1 '^PATCHLEVEL *=' Makefile | awk '{print $3}')
        S=$(grep -m1 '^SUBLEVEL *=' Makefile | awk '{print $3}')
        FULL="$V.$P.$S"
        echo "TKERNEL_VERSION=$FULL" >> "$GITHUB_ENV"
        echo "Full kernel version: $FULL"
    - name: Derive Android/Kernel Branch
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common"
        BRANCH="$( (grep -m1 '^[[:space:]]*BRANCH=' "$KP/build.config.common" || grep -m1 '^[[:space:]]*BRANCH=' "$KP/build.config.constants" || true) | awk -F= '{print $2}' | tr -d '[:space:]')"
        if [ -n "$BRANCH" ]; then
          echo "Detected BRANCH=$BRANCH; keeping input values KANDROID_VERSION=${{ inputs.android_version }}; KERNEL_VERSION=${{ inputs.kernel_version }}"
        else
          echo "No BRANCH found in build.config files; using input values KANDROID_VERSION=${{ inputs.android_version }}; KERNEL_VERSION=${{ inputs.kernel_version }}"
        fi
    - name: Resolve SUSFS Branch
      shell: bash
      run: |
        set -euo pipefail
        if [[ -n "${{ inputs.susfs_branch }}" ]]; then
          echo "SUSFS_KERNEL_BRANCH=${{ inputs.susfs_branch }}" >> "$GITHUB_ENV"
          echo "Using provided SUSFS branch: ${{ inputs.susfs_branch }}"
        else
          JSON="${SUSFS_JSON:-}"
          A="${KANDROID_VERSION:-}"
          K="${KERNEL_VERSION:-}"
          if [[ -z "$A" || -z "$K" ]]; then
            echo "ERROR: Missing KANDROID_VERSION ('$A') or KERNEL_VERSION ('$K') before resolving SUSFS branch." >&2
            exit 1
          fi
          key="${A}-${K}"
          declare -A map=(
            ["android12-5.10"]=""
            ["android13-5.10"]=""
            ["android13-5.15"]=""
            ["android14-5.15"]=""
            ["android14-6.1"]=""
            ["android15-6.6"]=""
          )
          if [[ -n "$JSON" ]]; then
            if jq empty <<<"$JSON" >/dev/null 2>&1; then
              for k in "${!map[@]}"; do
                v=$(jq -r --arg k "$k" '.[$k] // empty' <<<"$JSON" 2>/dev/null || echo "")
                if [[ -n "$v" && "$v" != "null" ]]; then
                  map["$k"]="$v"
                fi
              done
            else
              echo "WARNING: Invalid SUSFS_JSON provided, ignoring."
            fi
          fi
          if [[ -z "${map[$key]+_exists}" ]]; then
            echo "ERROR: Unsupported Android/Kernel combo: $key" >&2
            echo "Supported combos: ${!map[*]}" >&2
            exit 1
          fi
          susfs_branch="${map[$key]}"
          if [[ -z "$susfs_branch" ]]; then
            susfs_branch="gki-${key}"
          fi
          echo "SUSFS_KERNEL_BRANCH=$susfs_branch" >> "$GITHUB_ENV"
          echo "Resolved SUSFS branch: $susfs_branch"
        fi
    - name: Derive Build Metadata (env)
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common"
        V=$(grep -m1 '^VERSION *=' "$KP/Makefile" | awk '{print $3}')
        P=$(grep -m1 '^PATCHLEVEL *=' "$KP/Makefile" | awk '{print $3}')
        S=$(grep -m1 '^SUBLEVEL *=' "$KP/Makefile" | awk '{print $3}')
        FULL="$V.$P.$S"
        echo "KERNEL_FULL_VER=$FULL" >> "$GITHUB_ENV"
        echo "ANDROID_VER=${KANDROID_VERSION}" >> "$GITHUB_ENV"
        echo "KERNEL_VER=${KERNEL_VERSION}" >> "$GITHUB_ENV"
    - name: Branding
      shell: bash
      run: |
        set -euo pipefail
        CUSTOM_LOCALVERSION="-${KANDROID_VERSION}-OnePlus-UltraBolt"
        echo "CUSTOM_LOCALVERSION=$CUSTOM_LOCALVERSION" >> "$GITHUB_ENV"
    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -euo pipefail
        cd "${CONFIG}/kernel_platform"
        META="${{ inputs.KSU_META }}"
        if [[ "$(grep -o '/' <<< "$META" | wc -l)" -lt 2 ]]; then
          echo "Error: KSU_META parameter missing required separator '/', format should be: branch name/custom identifier (optional)/commit hash (optional)"
          exit 10
        fi
        IFS='/' read -r BRANCH_NAME CUSTOM_TAG MANUAL_HASH <<< "$META"
        echo "Branch name: $BRANCH_NAME"
        [[ -n "$CUSTOM_TAG" ]] && echo "Custom version identifier: $CUSTOM_TAG" || echo "Custom version identifier: disabled"
        [[ -n "$MANUAL_HASH" ]] && echo "Manual hash: $MANUAL_HASH" || echo "Manual hash: disabled"
        echo "KSU_BRANCH=$BRANCH_NAME" >> "$GITHUB_ENV"
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
        cd ./KernelSU
        if [[ -n "$MANUAL_HASH" ]]; then
          git fetch origin "$BRANCH_NAME" --depth=50
          git checkout "$MANUAL_HASH"
          SHORT_HASH=${MANUAL_HASH:0:8}
        fi
        KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
          grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
        if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
          KSU_API_VERSION="3.1.7"
        fi
        echo "KSU_API_VERSION=$KSU_API_VERSION" >> "$GITHUB_ENV"
        GIT_HASH=$(git rev-parse --short HEAD)
        if [[ -n "$MANUAL_HASH" ]]; then
          USE_HASH="$SHORT_HASH"
        else
          USE_HASH="$GIT_HASH"
        fi
        if [[ -z "$CUSTOM_TAG" ]]; then
          VERSION_FULL="v$KSU_API_VERSION-$USE_HASH@$BRANCH_NAME"
        else
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$USE_HASH]"
        fi
        sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
        sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
        sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
        VERSION_DEFINITIONS=$(cat <<EOF
        define get_ksu_version_full
        $VERSION_FULL
        endef
          KSU_VERSION_API := $KSU_API_VERSION
          KSU_VERSION_FULL := $VERSION_FULL
        EOF
        )
        awk -v def="$VERSION_DEFINITIONS" '
          /REPO_OWNER :=/ {print; print def; inserted=1; next}
          1
          END {if (!inserted) print def}
        ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> "$GITHUB_ENV"
        echo "::group::Final Makefile version info and partial debug results preview"
        grep -A10 "REPO_OWNER" kernel/Makefile || true
        grep "KSU_VERSION_FULL" kernel/Makefile || true
        echo "::endgroup::"
    - name: Apply Patches SukiSU Ultra
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG"
        echo "Fetching susfs patches"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${SUSFS_KERNEL_BRANCH}"
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        cd kernel_platform
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch ./common/
        cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        cd ./common
        GKI_V="${KANDROID_VERSION}-${KERNEL_VERSION}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')
        if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          echo "Fixing some bugs caused by kernel version 5.15.0 to 5.15.123 only supporting old C libraries"
          curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
          echo "fix_5.15_patch completed"
        fi
        KERNEL_VERSION="${KERNEL_VERSION}"
        TKERNEL_VERSION="${TKERNEL_VERSION}"
        file="${FILE}"
        TRUSTY_EXISTS=false
        if [[ "$KERNEL_VERSION" == "6.6" ]]; then
          if grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${file}.xml"; then
            TRUSTY_EXISTS=true
          fi
          echo "trusty_exists=$TRUSTY_EXISTS" >> "$GITHUB_OUTPUT"
          if [[ "$TRUSTY_EXISTS" == "false" && "$(printf '%s\n' "$TKERNEL_VERSION" "6.6.30" | sort -V | head -n1)" = "$TKERNEL_VERSION" ]]; then
            echo "Fixing susfs errors caused by missing Trusty OS on some kernel 6.6 models"
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch
          fi
        fi
        echo "Applying susfs patch"
        patch -p1 < 50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch || true
        echo "susfs_patch completed"
    - name: Record SUSFS Version
      shell: bash
      run: |
        set -euo pipefail
        cd "${CONFIG}/susfs4ksu"
        SUSVER=$(git rev-parse --short HEAD || echo unknown)
        echo "SUSVER=$SUSVER" >> "$GITHUB_ENV"
    - name: Apply Hide Stuff Patches
      shell: bash
      run: |
        set -euo pipefail
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        echo "Applying hide app patch"
        patch -p1 -F 3 < 69_hide_stuff.patch
        echo "hide app_patch completed"
    - name: Apply HOOK
      shell: bash
      run: |
        set -euo pipefail
        echo "Changing to configuration directory: $CONFIG..."
        cd "$CONFIG/kernel_platform/common"
        if [ "${{ inputs.HOOK }}" = "kprobe" ]; then
          echo "Invoking kprobe hook"
        elif [ "${{ inputs.HOOK }}" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/scope_min_manual_hooks_v1.5.patch ./
          echo "Invoking manual hook"
          patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch
        elif [ "${{ inputs.HOOK }}" = "tracepoint" ]; then
          cp ../../SukiSU_patch/hooks/sukisu_tracepoint_hooks_v1.1.patch ./
          echo "Invoking tracepoint hook"
          patch -p1 -F 3 < sukisu_tracepoint_hooks_v1.1.patch
        fi
    - name: Apply LSM Baseband Guard
      if: ${{ inputs.LSM == 'true' }}
      shell: bash
      run: |
        set -euo pipefail
        cd "$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common"
        echo "Enabling Baseband Guard (LSM)..."
        curl -LSs https://raw.githubusercontent.com/vc-teahouse/Baseband-guard/main/setup.sh | bash
        if grep -q '^config LSM' security/Kconfig; then
          if awk '/^config LSM$/{f=1} f && /default/{print; exit}' security/Kconfig | grep -q 'lockdown'; then
            sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' security/Kconfig
          else
            sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/bpf/bpf,baseband_guard/ } }' security/Kconfig
          fi
        fi
    - name: Convert HMBIRD_OGKI to HMBIRD_GKI (6.6 only)
      shell: bash
      run: |
        set -euo pipefail
        if [ "${KERNEL_VERSION}" != "6.6" ]; then
          echo "Skipping HMBIRD patch: KERNEL_VERSION=${KERNEL_VERSION}"
          exit 0
        fi
        cd "${CONFIG}/kernel_platform/common"
        curl -fL -o hmbird_patch.patch https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_patch.patch
        grep -q 'hmbird_patch.o' drivers/Makefile || echo 'obj-y += hmbird_patch.o' >> drivers/Makefile
        patch -p1 -F 3 < hmbird_patch.patch || echo "hmbird patch failed (non-fatal)"
    - name: Add KernelSU / SUSFS Config
      shell: bash
      run: |
        set -euo pipefail
        cd "$GITHUB_WORKSPACE/${CONFIG}/kernel_platform"
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
        KERNEL_VERSION="${KERNEL_VERSION}"
        echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
        echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
        if [ "${{ inputs.HOOK }}" = "kprobe" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
        elif [ "${{ inputs.HOOK }}" = "manual" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
        elif [ "${{ inputs.HOOK }}" = "tracepoint" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE"
        fi
        echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_MAP=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
        
        echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
        
        echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
        echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
        echo "CONFIG_NET_SCH_FQ_CODEL=y" >> "$CONFIG_FILE"
        echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$CONFIG_FILE"
        echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$CONFIG_FILE"
        echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$CONFIG_FILE"
        
        echo "CONFIG_LTO_CLANG_THIN=y" >> "$CONFIG_FILE"
        echo "CONFIG_LTO_CLANG=y" >> "$CONFIG_FILE"
        
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$CONFIG_FILE"
        echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "$CONFIG_FILE"
        
        if [ "${{ inputs.LSM }}" = "true" ]; then
          echo "CONFIG_BBG=y" >> "$CONFIG_FILE"
        fi
    - name: Add sched_ext (6.6 only)
      shell: bash
      run: |
        set -euo pipefail
        if [ "${KERNEL_VERSION}" != "6.6" ]; then
          echo "Skipping sched_ext: KERNEL_VERSION=${KERNEL_VERSION}"
          exit 0
        fi
        cd "${CONFIG}/kernel_platform"
        git clone https://github.com/HanKuCha/sched_ext.git
        cp -r sched_ext/* ./common/kernel/sched/
        rm -rf sched_ext/.git
    - name: Save Build Metadata
      id: save_metadata
      shell: bash
      run: |
        set -euo pipefail
        CONFIG_DIR="$GITHUB_WORKSPACE/$CONFIG"
        ARTIFACTS_DIR="$CONFIG_DIR/artifacts"
        mkdir -p "$ARTIFACTS_DIR"
        KP="$CONFIG_DIR/kernel_platform/common"
        V=$(grep -m1 '^VERSION *=' "$KP/Makefile" | awk '{print $3}')
        P=$(grep -m1 '^PATCHLEVEL *=' "$KP/Makefile" | awk '{print $3}')
        S=$(grep -m1 '^SUBLEVEL *=' "$KP/Makefile" | awk '{print $3}')
        FULL="$V.$P.$S"
        echo "${ANDROID_VER:-unknown}-${FULL}" > "$ARTIFACTS_DIR/${CONFIG}.txt"
        echo "kernel_version=$FULL" >> "$GITHUB_OUTPUT"
        echo "ksu_version=${KSUVER:-unknown}" >> "$GITHUB_OUTPUT"
        echo "susfs_version=${SUSVER:-unknown}" >> "$GITHUB_OUTPUT"
    - name: Detect Clang (toolchain for build)
      shell: bash
      run: |
        set -euo pipefail
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base"/clang/host/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
            CLANG_BIN="$latest/bin"
            CLANG_FOUND=true
          fi
        done
        if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
          CLANG_FOUND=true
          echo "Using system clang."
        fi
        $CLANG_FOUND || { echo "No clang toolchain found"; exit 1; }
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
        CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
        echo "CLANG_VERSION=$CLANG_VERSION" >> "$GITHUB_ENV"
        echo "Detected Clang: $CLANG_VERSION"
    - name: Build Kernel
      shell: bash
      env:
        PYTHONWARNINGS: ignore:invalid escape sequence
      run: |
        set -euo pipefail
        echo "::group::Build kernel"
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        cd "$COMMON"
        : > "$COMMON/.scmversion"
        export PYTHONWARNINGS="${PYTHONWARNINGS}"
        if [ -n "${CLANG_BIN_PATH:-}" ] && [ -x "${CLANG_BIN_PATH}/clang" ]; then
          export PATH="${CLANG_BIN_PATH}:$PATH"
        fi
        export LLVM=1 LLVM_IAS=1
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++
        export CC=clang
        OUT=out
        mkdir -p "$OUT"
        make O="$OUT" gki_defconfig
        if [ -n "${CUSTOM_LOCALVERSION:-}" ]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
          sed -i 's/scm_version="$(scm_version --short)"/scm_version=""/' scripts/setlocalversion
        fi
        if [ "${{ inputs.optimize_level }}" = "O3" ]; then
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O3"
        else
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O2"
        fi
        KCFLAGS="-Wno-error -pipe -fno-stack-protector ${KCFLAGS_EXTRA}"
        KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
        make O="$OUT" olddefconfig
        echo "Starting build with $(nproc --all) threads..."
        set -o pipefail
        make -j"$(nproc --all)" O="$OUT" KCFLAGS="$KCFLAGS" KCPPFLAGS="$KCPPFLAGS" 2>&1 | tee build.log
        IMG="$OUT/arch/arm64/boot/Image"
        if [ ! -f "$IMG" ]; then
          echo "Kernel Image missing"
          exit 1
        fi
        sha256sum "$IMG" | tee "$OUT/Image.sha256"
        echo "::endgroup::"
    - name: Collect Build Stats / Validate Image
      id: collect_stats
      shell: bash
      run: |
        set -euo pipefail
        KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        COMMON="$KERNEL_PATH/common"
        OUT="$COMMON/out"
        IMG="$OUT/arch/arm64/boot/Image"
        WARNINGS=$(grep -i -E 'warning:' "$COMMON/build.log" | wc -l || true)
        echo "$WARNINGS" > "$OUT/warnings.txt"
        file "$IMG" > "$OUT/Image.file"
        KERNEL_UNAME=$(strings "$IMG" | grep -E 'Linux version.*#' | tail -n1 || true)
        echo "Kernel Uname: $KERNEL_UNAME"
        echo "KERNEL_UNAME=$KERNEL_UNAME" >> "$GITHUB_ENV"
        if ! file "$IMG" | grep -qi 'ARM64'; then
          echo "Image does not appear to be ARM64:"
          file "$IMG"
          exit 1
        fi
        MIN_SIZE=$((6*1024*1024))
        ACTUAL_SIZE=$(stat -c %s "$IMG")
        if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
          echo "Image size $ACTUAL_SIZE < $MIN_SIZE (suspicious)"; exit 1
        fi
        IMAGE_SHA256=$(cut -d' ' -f1 "$OUT/Image.sha256")
        echo "Image sha256: $IMAGE_SHA256"
        echo "warnings=$WARNINGS" >> "$GITHUB_OUTPUT"
        echo "image_sha256=$IMAGE_SHA256" >> "$GITHUB_OUTPUT"
    - name: Prepare Image for AnyKernel3
      shell: bash
      run: |
        set -euo pipefail
        IMG="$GITHUB_WORKSPACE/${CONFIG}/kernel_platform/common/out/arch/arm64/boot/Image"
        if [ -f "$IMG" ]; then
          cp "$IMG" "$GITHUB_WORKSPACE/AnyKernel3/Image"
        else
          echo "Warning: Image not found for packaging at $IMG"
        fi
    - name: Download Latest SUSFS Module from CI
      shell: bash
      continue-on-error: true
      env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        cd "$GITHUB_WORKSPACE"
        LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${GH_TOKEN}" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
          jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
        if [ -z "${LATEST_RUN_ID:-}" ] || [ "${LATEST_RUN_ID}" = "null" ]; then
          echo "No successful run found for branch v1.5.2+"
          exit 0
        fi
        ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${GH_TOKEN}" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | \
          jq -r '.artifacts[0].archive_download_url')
        if [ -z "${ARTIFACT_URL:-}" ] || [ "${ARTIFACT_URL}" = "null" ]; then
          echo "Failed to fetch artifact URL"
          exit 0
        fi
        echo "Downloading SUSFS module artifact from run $LATEST_RUN_ID"
        curl -L -H "Authorization: Bearer ${GH_TOKEN}" -o "ksu_module_susfs_1.5.2+_CI.zip" "$ARTIFACT_URL"
        if [ -s "ksu_module_susfs_1.5.2+_CI.zip" ]; then
          cp "ksu_module_susfs_1.5.2+_CI.zip" "$GITHUB_WORKSPACE/AnyKernel3/"
          echo "SUSFS module copied to AnyKernel3/"
        else
          echo "Downloaded artifact is empty; skipping include"
        fi
    - name: Create Flashable ZIP
      id: create_zip
      shell: bash
      run: |
        set -euo pipefail
        ART="$GITHUB_WORKSPACE/${CONFIG}/artifacts"
        mkdir -p "$ART"
        cd "$GITHUB_WORKSPACE/AnyKernel3"
        ZIP="AnyKernel3_${{ inputs.model }}_${KANDROID_VERSION}-${KERNEL_VERSION}_SukiSU_${KSUVER}.zip"
        rm -rf .git || true
        echo "Creating $ZIP"
        zip -r9 "$ZIP" ./*
        mv "$ZIP" "$ART/"
        echo "ZIP created at $ART/$ZIP"
    - name: Final Build Summary
      shell: bash
      run: |
        set -euo pipefail
        {
          echo "Model: ${{ inputs.model }}"
          echo "Android: ${{ env.ANDROID_VER }}"
          echo "Kernel base: ${{ env.KERNEL_VER }}"
          echo "Kernel full: ${{ env.KERNEL_FULL_VER }}"
          echo "Kernel Uname: ${{ env.KERNEL_UNAME }}"
          echo "SukiUltra Version: ${KSUVER:-unknown}"
          echo "SukiUltra branch: ${KSU_BRANCH:-unknown}"
          echo "SUSFS branch used: ${SUSFS_KERNEL_BRANCH:-gki-${KANDROID_VERSION}-${KERNEL_VERSION}}"
          echo "Optimization: ${{ inputs.optimize_level }}"
          echo "Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "Compiler: ${CLANG_VERSION:-unknown}"
          echo "Warnings: ${{ steps.collect_stats.outputs.warnings }}"
        } | tee summary.txt
        {
          echo "### Kernel Build Summary"
          echo ""
          echo "- Model: ${{ inputs.model }}"
          echo "- Android: ${{ env.ANDROID_VER }}"
          echo "- Kernel Version: ${{ steps.save_metadata.outputs.kernel_version }}"
          echo "- Kernel Uname: ${{ env.KERNEL_UNAME }}"
          echo "- SukiUltra Version: ${KSUVER:-unknown}"
          echo "- SukiUltra Branch: [${KSU_BRANCH:-unknown}](https://github.com/SukiSU-Ultra/SukiSU-Ultra/tree/${KSU_BRANCH:-main})"
          echo "- SUSFS branch used: [${SUSFS_KERNEL_BRANCH:-gki-${KANDROID_VERSION}-${KERNEL_VERSION}}](https://gitlab.com/simonpunk/susfs4ksu/-/tree/${SUSFS_KERNEL_BRANCH:-gki-${KANDROID_VERSION}-${KERNEL_VERSION}})"
          echo "- Optimization: ${{ inputs.optimize_level }}"
          echo "- Image SHA256: ${{ steps.collect_stats.outputs.image_sha256 }}"
          echo "- Warnings: ${{ steps.collect_stats.outputs.warnings }}"
        } >> "$GITHUB_STEP_SUMMARY"
    - name: Upload Artifacts
      if: success() && steps.create_zip.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.CONFIG }}
        path: |
          ${{ env.CONFIG }}/artifacts/*
