name: Build and Release OnePlus Kernels

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      config:
        description: "Model"
        required: true
        type: choice
        default: oneplus_13r
        options:
          - oneplus_nord_ce4_lite_5g_v
          - oneplus_nord_ce4_v
          - oneplus_nord_4_v
          - oneplus_ace_3v_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad_pro_v
          - oneplus_pad2_v
          - oneplus_nord_5
          - oneplus_ace5_pro
          - oneplus_13
          - oneplus_13_global
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
          - oneplus_ace5_ultra
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      ksun_branch:
        description: 'Enter KernelSU Next Branch or commit hash (blank for stable tag)'
        required: true
        type: string
        default: next
      optimize_level:
        description: 'Compiler optimization level'
        required: true
        type: choice
        options: [O2, O3]
        default: O2
      KSU_META:
        description: 'SukiSU Ultra branch/custom version identifier (e.g., susfs-main/⚡Ultra⚡/)'
        required: false
        type: string
        default: 'susfs-main/⚡Ultra⚡/'
      HOOK:
        description: 'SukiSU hook type'
        required: false
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      LSM:
        description: 'Enable kernel-level Baseband Guard (LSM)?'
        required: true
        type: boolean
        default: false
      susfs_mapping_json:
        description: 'JSON map for SusFS branch per combo. Keys: android12-5.10, android13-5.10, android13-5.15, android14-5.15, android14-6.1, android15-6.6'
        required: false
        type: string
        default: '{"android12-5.10":"","android13-5.10":"","android13-5.15":"","android14-5.15":"","android14-6.1":"","android15-6.6":""}'

jobs:
  build:
    name: build (${{ inputs.config }}, ${{ inputs.ksun_branch }})
    runs-on: ubuntu-latest
    steps:
      - name: Resolve selection to parameters
        id: select
        shell: bash
        run: |
          set -euo pipefail
          sel="${{ inputs.config }}"
          model=""
          manifest=""
          case "$sel" in
            oneplus_11_v)                model="OP11";                manifest="oneplus_11_v.xml" ;;
            oneplus_13)                  model="OP13-CN";             manifest="oneplus_13.xml" ;;
            oneplus_13_global)           model="OP13-GLO";            manifest="oneplus_13_global.xml" ;;
            oneplus_ace5_pro)            model="OPAce5Pro";           manifest="oneplus_ace5_pro.xml" ;;
            oneplus_13s)                 model="OP13S";               manifest="oneplus_13s.xml" ;;
            oneplus_pad_3)               model="OP-PAD-3";            manifest="oneplus_pad_3.xml" ;;
            oneplus_13t)                 model="OP13T";               manifest="oneplus_13t.xml" ;;
            oneplus_pad_2_pro)           model="OP-PAD-2-PRO";        manifest="oneplus_pad_2_pro.xml" ;;
            oneplus12_v)                 model="OP12";                manifest="oneplus12_v.xml" ;;
            oneplus_13r)                 model="OP13r";               manifest="oneplus_13r.xml" ;;
            oneplus_ace5)                model="OP-ACE-5";            manifest="oneplus_ace5.xml" ;;
            oneplus_ace_3v_v)            model="OP-ACE-3V";           manifest="oneplus_ace_3v_v.xml" ;;
            oneplus_nord_ce4_v)          model="OP-NORD-CE4";         manifest="oneplus_nord_ce4_v.xml" ;;
            oneplus_nord_5)              model="OP-Nord-5";           manifest="oneplus_nord_5.xml" ;;
            oneplus_pad2_v)              model="OP-PAD-2";            manifest="oneplus_pad2_v.xml" ;;
            oneplus_ace3_pro_v)          model="OP-Ace3-Pro";         manifest="oneplus_ace3_pro_v.xml" ;;
            oneplus_nord_ce4_lite_5g_v)  model="OP-Nord-CE4-LITE";    manifest="oneplus_nord_ce4_lite_5g_v.xml" ;;
            oneplus_pad_pro_v)           model="OP-PAD-Pro";          manifest="oneplus_pad_pro_v.xml" ;;
            oneplus_11r_v)               model="OP11r";               manifest="oneplus_11r_v.xml" ;;
            oneplus_open_v)              model="OP-OPEN";             manifest="oneplus_open_v.xml" ;;
            oneplus_ace2_v)              model="OP-ACE-2";            manifest="oneplus_ace2_v.xml" ;;
            oneplus_10t_v)               model="OP10t";               manifest="oneplus_10t_v.xml" ;;
            oneplus_10_pro_v)            model="OP10pro";             manifest="oneplus_10_pro_v.xml" ;;
            oneplus_ace2_pro_v)          model="OP-ACE-2-PRO";        manifest="oneplus_ace2_pro_v.xml" ;;
            oneplus_12r_v)               model="OP12r";               manifest="oneplus_12r_v.xml" ;;
            oneplus_ace3_v)              model="OP-Ace3";             manifest="oneplus_ace3_v.xml" ;;
            oneplus_ace_pro_v)           model="OP-ACE-PRO";          manifest="oneplus_ace_pro_v.xml" ;;
            oneplus_ace5_ultra)          model="OP-ACE5-ULTRA";       manifest="oneplus_ace5_ultra.xml" ;;
            oneplus_nord_4_v)            model="OP-NORD-4";           manifest="oneplus_nord_4_v.xml" ;;
            *) echo "Unknown config: $sel"; exit 1 ;;
          esac
          echo "model=$model"       >> "$GITHUB_ENV"
          echo "manifest=$manifest" >> "$GITHUB_ENV"

      - name: Extract Manifest Info
        id: extract_info
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"
          FILE="${{ env.manifest }}"
          if [[ -z "$FILE" ]]; then
            echo "env.manifest is empty"; exit 1
          fi
          FILE_CONF="${FILE%.xml}"
          FILE_BASE=$(echo "$FILE_CONF" | sed -E 's/_([a-zA-Z0-9])/\U\1/g; s/^oneplus/OnePlus/; s/^realme/Realme/; s/^oppo/Oppo/')
          mkdir -p ".repo/manifests_fallback"
          XML_PATH=".repo/manifests_fallback/${FILE_CONF}.xml"
          README_PATH=".repo/manifests_fallback/README.md"
          echo "FILE_CONF=$FILE_CONF"   >> "$GITHUB_ENV"
          echo "FILE_BASE=$FILE_BASE"   >> "$GITHUB_ENV"
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi
          declare -A REPOS
          REPOS["OnePlusOSS"]="https://api.github.com/repos/OnePlusOSS/kernel_manifest"
          REPOS["Dynamic"]="https://api.github.com/repos/Numbersf/kernel_manifest"
          FOUND_REPO=""
          FOUND_BRANCH=""
          check_repo() {
            local OWNER=$1 REPO_URL=$2
            BRANCHES=$(curl -s "$REPO_URL/branches" | jq -r '.[].name' || true)
            [[ -z "$BRANCHES" ]] && return 1
            for BR in $BRANCHES; do
              XML_URL="https://raw.githubusercontent.com/${OWNER}/kernel_manifest/$BR/${FILE_CONF}.xml"
              README_URL="https://raw.githubusercontent.com/${OWNER}/kernel_manifest/$BR/README.md"
              if curl -sf --head "$XML_URL" >/dev/null; then
                curl -s -o "$XML_PATH" "$XML_URL"
                curl -s -o "$README_PATH" "$README_URL" || true
                FOUND_REPO="$OWNER"
                FOUND_BRANCH="$BR"
                return 0
              fi
            done
            return 1
          }
          if check_repo "OnePlusOSS" "${REPOS["OnePlusOSS"]}"; then
            echo "MANIFEST_REPO=OnePlusOSS" >> "$GITHUB_ENV"
            echo "MANIFEST_BRANCH=$FOUND_BRANCH" >> "$GITHUB_ENV"
          fi
          if [[ -z "$FOUND_REPO" ]]; then
            DYNAMIC_URL="${REPOS["Dynamic"]}"
            DYNAMIC_OWNER=$(echo "$DYNAMIC_URL" | sed -E 's#https://api.github.com/repos/([^/]+)/.*#\1#')
            if check_repo "$DYNAMIC_OWNER" "$DYNAMIC_URL"; then
              echo "MANIFEST_REPO=$DYNAMIC_OWNER" >> "$GITHUB_ENV"
              echo "MANIFEST_BRANCH=$FOUND_BRANCH" >> "$GITHUB_ENV"
            fi
          fi
          if [[ -z "$FOUND_REPO" || ! -s "$XML_PATH" ]]; then
            echo "Could not find ${FILE_CONF}.xml in manifest repos"; exit 1
          fi
          REVISION=$(grep -oP '<project[^>]+revision="\K[^"]+' "$XML_PATH" | head -n1 || true)
          CPU=$(echo "$REVISION" | sed -E 's#^(oneplus|realme|oppo)/([^/]+).*#\2#')
          ANDROID_KERNEL=$(echo "$REVISION" | grep -oE 'android[0-9]+-[0-9]+\.[0-9]+' || true)
          if [[ -n "$CPU" ]]; then
            echo "soc=$CPU" >> "$GITHUB_ENV"
          fi
          if [[ -n "$ANDROID_KERNEL" ]]; then
            AV="${ANDROID_KERNEL%-*}"
            KV="${ANDROID_KERNEL#*-}"
            echo "android_version=$AV" >> "$GITHUB_ENV"
            echo "kernel_version=$KV" >> "$GITHUB_ENV"
            echo "ANDROID_SHORT_VERSION=${AV#android}" >> "$GITHUB_ENV"
          fi
          if [[ -s "$README_PATH" ]]; then
            BUILD_LINE=$(grep -m1 'oplus_build_kernel.sh' "$README_PATH" || true)
            if [[ -n "$BUILD_LINE" ]]; then
              CPUD=$(echo "$BUILD_LINE" | awk '{print $(NF-1)}')
              BUILD_METHOD=$(echo "$BUILD_LINE" | awk '{print $NF}')
              echo "CPUD=$CPUD" >> "$GITHUB_ENV"
              echo "BUILD_METHOD=$BUILD_METHOD" >> "$GITHUB_ENV"
            fi
          fi

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build Kernel
        uses: ./.github/actions/build
        env:
          SUSFS_JSON: ${{ inputs.susfs_mapping_json }}
        with:
          model: ${{ env.model }}
          soc: ${{ env.soc }}
          branch: ${{ env.MANIFEST_BRANCH }}
          manifest: ${{ env.manifest }}
          android_version: ${{ env.android_version }}
          kernel_version: ${{ env.kernel_version }}
          ksun_branch: ${{ inputs.ksun_branch }}
          optimize_level: ${{ inputs.optimize_level }}
          KSU_META: ${{ inputs.KSU_META }}
          HOOK: ${{ inputs.HOOK }}
          LSM: ${{ inputs.LSM }}

  trigger-release:
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: 'OnePlus Kernels With SukiSU'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate and Create New Tag
        run: |
          set -euo pipefail
          git fetch --tags --quiet
          BASE_TAG="v1.5.12"
          LATEST_TAG=$(git tag --list "${BASE_TAG}-r*" | sort -V | tail -n1 || true)
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="${BASE_TAG}-r0"
          else
            n=$(echo "$LATEST_TAG" | awk -F'-r' '{print $2}')
            [ -z "$n" ] && n=0
            n=$((n + 1))
            NEW_TAG="${BASE_TAG}-r${n}"
          fi
          echo "NEW_TAG=${NEW_TAG}" >> "$GITHUB_ENV"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "Created tag: $NEW_TAG"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Generate Device List and Final Release Notes
        id: generate-notes
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Start building the release notes ==="
          cat << 'EOF' > release_notes.md
          This release contains SukiSU
          
          ### Built Devices
          
          | Model | Kernel Version |
          |-------|----------------|
          EOF
          
          if [ -d "./downloaded-artifacts" ]; then
            for file in $(find downloaded-artifacts -name "*.txt" -type f | sort 2>/dev/null || true); do
              if [ -f "$file" ]; then
                model=$(basename "$file" .txt)
                version=$(cat "$file" 2>/dev/null || echo "Unknown")
                printf "| %-12s | %-16s |\n" "$model" "$version" >> release_notes.md
              fi
            done
          fi
          
          echo "--- Final Release Notes ---"
          cat release_notes.md

      - name: Create GitHub Release
        run: |
          set -euo pipefail
          gh release create "${{ env.NEW_TAG }}" \
            --repo "${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" \
            --title "${{ env.RELEASE_NAME }}" \
            --notes-file release_notes.md \
            --prerelease

      - name: Upload Release Assets Dynamically
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          upload_count=0
          for file in ./downloaded-artifacts/*/*.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload "${{ env.NEW_TAG }}" "$file" --clobber || \
                echo "WARNING: Failed to upload $file"
              ((upload_count++))
            fi
          done
          echo "Uploaded $upload_count assets"
          shopt -u nullglob
